<?xml version="1.0" encoding="UTF-8"?>
<!--  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>-->
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->
<?xml-model href="rfc7991bis.rnc"?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>

<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc toc="yes"?>

<rfc ipr="trust200902" submissionType="IETF" consensus="true" docName="draft-ietf-lpwan-schc-compound-ack-15" category="std" updates="8724,9363">

  <front>
   <title abbrev="SCHC Compound ACK">
     SCHC Compound ACK
   </title>

    <author fullname="Juan Carlos Zuniga" initials="JC." surname="Zuniga">
      <organization abbrev="Cisco">
        Cisco
      </organization>
      <address>
	    <postal>
          <street></street>
          <city>Montreal</city>
          <code> QC</code>
          <country>Canada</country>
        </postal>
        <email>juzuniga@cisco.com</email>
      </address>
    </author>

   <author initials="C." surname="Gomez" fullname="Carles Gomez">
      <organization>Universitat Politecnica de Catalunya</organization>
      <address>
        <postal>
          <street>C/Esteve Terradas, 7</street> <street>08860 Castelldefels</street>
          <country>Spain</country>
        </postal>
        <email>carles.gomez@upc.edu</email>
      </address>
    </author>

   <author initials="S." surname="Aguilar" fullname="Sergio Aguilar">
         <organization>Universitat Politecnica de Catalunya</organization>
      <address>
        <postal>
          <street>C/Esteve Terradas, 7</street> <street>08860 Castelldefels</street>
          <country>Spain</country>
        </postal>
        <email>sergio.aguilar.romero@upc.edu</email>
      </address>
   </author>

	<author initials="L." surname="Toutain" fullname="Laurent Toutain">
      <organization>IMT-Atlantique</organization>
      <address>
        <postal>
          <street>2 rue de la Chataigneraie</street> <street>CS 17607</street>
          <city>35576 Cesson-Sevigne Cedex</city>
          <country>France</country>
        </postal>
        <email>Laurent.Toutain@imt-atlantique.fr</email>
      </address>
    </author>

   <author initials="S." surname="Cespedes" fullname="Sandra Cespedes">
         <organization>Concordia University</organization>
      <address>
        <postal>
          <street>1455 De Maisonneuve Blvd. W.</street>
            <city>Montreal QC, H3G 1M8</city>
          <country>Canada</country>
        </postal>
        <email>sandra.cespedes@concordia.ca</email>
      </address>
   </author>

   <author initials="D." surname="Wistuba" fullname="Diego Wistuba">
         <organization>NIC Labs, Universidad de Chile</organization>
      <address>
        <postal>
          <street>Av. Almte. Blanco Encalada 1975</street> <street>Santiago</street>
          <country>Chile</country>
        </postal>
        <email>wistuba@niclabs.cl</email>
      </address>
   </author>

    <date year="2023" month="March" day="18"/>


    <workgroup>lpwan Working Group</workgroup>


    <abstract>


<t>The present document updates the SCHC (Static Context Header Compression and fragmentation) protocol RFC8724 and the corresponding Yang Module RFC9363. It defines a SCHC Compound ACK message
format and procedure, which are intended to reduce the number of response transmissions (i.e., SCHC ACKs) in the ACK-on-Error mode, by accumulating bitmaps of several windows in a single SCHC message
(i.e., the SCHC Compound ACK). </t>
<t>Both message format and procedure are generic, so they can be used, for instance, by any of the four Low Power Wide Area Networks (LPWANs) technologies defined in RFC8376, being Sigfox, LoRaWAN, NB-IoT and IEEE 802.15.4w.


</t>



    </abstract>


  </front>

  <middle>


<section anchor="Introduction" title="Introduction">

<t>The Generic Framework for Static Context Header Compression and Fragmentation (SCHC) specification <xref target="RFC8724"/> describes two mechanisms:
i) a protocol header compression scheme, and ii) a frame fragmentation and loss recovery functionality. Either can be used on top of radio technologies such as the four Low Power Wide Area Networks (LPWANs) listed in <xref target="RFC8376"/>, being Sigfox, LoRaWAN, NB-IoT and IEEE 802.15.4w. These LPWANs have similar characteristics such as star-oriented topologies, network architecture,
connected devices with built-in applications, etc.
</t>
<t>SCHC offers a great level of flexibility to accommodate all these LPWAN technologies. Even though there are a great number of similarities between
them, some differences exist with respect to the transmission characteristics, payload sizes, etc. Hence, there are optimal parameters and modes of operation
that can be used when SCHC is used on top of a specific LPWAN technology.
</t>
<t>
   In ACK-on-Error mode in <xref target="RFC8724"/> the SCHC Packet is fragmented into pieces called tiles, with all tiles of the same size except for the last one, which can be smaller. Successive tiles are grouped in windows of fixed size.
    A SCHC Fragment carries one or several contiguous tiles, which may span multiple windows. When sending all tiles from all windows, the last tile is sent in an All-1 SCHC Fragment. The SCHC receiver, after receiving the All-1 SCHC Fragment will send a SCHC ACK reporting on the reception of exactly one window of tiles. In case of SCHC Fragment losses, a bitmap is added to the failure SCHC ACK, where each bit in the bitmap corresponds to a tile in the window. If SCHC Fragment losses span multiple windows, the SCHC receiver will send one failure SCHC ACK per window with losses.
</t>

    <t>The present document updates the SCHC protocol for frame fragmentation and loss recovery. It defines a SCHC Compound ACK format and procedure, which
is intended to reduce the number of response transmissions (i.e., SCHC ACKs) in the ACK-on-Error mode of SCHC. The SCHC Compound ACK extends the failure SCHC ACK message
format so that it can contain several bitmaps, each bitmap being identified by its corresponding window number.
The SCHC Compound ACK is backwards compatible with the SCHC ACK as defined in <xref target="RFC8724"/>, and introduces flexibility, as the receiver has the capability to respond to the All-0 SCHC Fragment, providing more downlink opportunities, and therefore adjusting to the delay requirements of the application.
</t>



</section>


<section anchor="terminology" title="Terminology">
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
   capitals, as shown here.</t>
<t>It is assumed that the reader is familiar with the terms and mechanisms defined in <xref target="RFC8376"/> and
in <xref target="RFC8724"/>.
</t>

</section>

<section anchor="schc-compound-ack" title="SCHC Compound ACK">

<t>The SCHC Compound ACK is a failure SCHC ACK message that can contain several bitmaps, each bitmap being identified by its
corresponding window number.
    In <xref target="RFC8724"/>, the failure SCHC ACK message only contain one bitmap corresponding to one window.
    The SCHC Compound ACK extends this format allowing more windows to be acknowledged in a single ACK, reducing the total number of failure SCHC ACK messages, specially when fragment losses are present in intermediate windows.
</t>

<t>The SCHC Compound ACK MAY be used in fragmentation modes that use windows and that allow
reporting the bitmaps of multiple windows at the same time, and MUST NOT be used otherwise.
</t>

<t>The SCHC Compound ACK:</t>

<t><list style="symbols">
<t>provides feedback only for windows with fragment losses,</t>
<t>has a variable size that depends on the number of windows with fragment losses being reported in the single Compound SCHC ACK,</t>
<t>includes the window number (i.e., W) of each bitmap,</t>
<!--has the same SCHC ACK format defined in <xref target="RFC8724"/> when only one window with losses is reported,-->
<t>might not cover all windows with fragment losses of a SCHC Packet,</t>
<t>and is distinguishable from the SCHC Receiver-Abort.</t>
</list></t>



<section anchor="schc-ack-format-1B" title="SCHC Compound ACK Message Format">

<t><xref target="success-ack-1byte"/> shows the success SCHC ACK format, i.e., when all fragments have been correctly received (C=1), as defined in <xref target="RFC8724"/>. </t>

<t><figure title="SCHC Success ACK message format, as defined in RFC8724" anchor="success-ack-1byte"><artwork><![CDATA[

               |-- SCHC ACK Header --|
                        |--T-|---M--| 1 |
               +--------+----+------+---+~~~~~~~~~~~~~~~~~~
               | RuleID |DTag|   W  |C=1| padding as needed
               +--------+----+------+---+~~~~~~~~~~~~~~~~~~

]]></artwork></figure></t>


<t>In case SCHC Fragment losses are found in any of the windows of the SCHC Packet, the SCHC Compound ACK MAY be used.
The SCHC Compound ACK message format is shown in <xref target="compound-ack-1byte"/> and <xref target="compound-ack-less-M-padding"/>.

</t>
<t><figure title="SCHC Compound ACK message format" anchor="compound-ack-1byte"><artwork><![CDATA[

  |--- SCHC ACK Header --|- W=w1 -|...|---- W=wi -----|
         |--T-|---M--|-1-|        |...|---M--|        |---M--|
  +------+----+------+---+--------+...+------+--------+------+~~~~~+
  |RuleID|DTag| W=w1 |C=0| Bitmap |...| W=wi | Bitmap |00..00| pad |
  +------+----+------+---+--------+...+------+--------+------+~~~~~+
                            next L2 Word boundary ->|<-- L2 Word ->|

     Losses are found in windows W = w1,...,wi; where w1<w2<...<wi

]]></artwork></figure></t>

<t>The SCHC Compound ACK groups the window number (W) with its corresponding bitmap.
Window numbers do not need to be contiguous. However, the window numbers and its corresponding bitmaps included in the SCHC Compound ACK message MUST be ordered from the lowest-numbered to the highest-numbered window.
Hence, if the bitmap of window number zero is present in the SCHC Compound ACK message, it MUST always be the first one in order and its W number MUST be placed in the SCHC ACK Header.</t>

<t>If M or more padding bits would be needed after the last bitmap in the message to fill the last L2 Word, M bits at 0 MUST be appended after the last bitmap, and then padding is applied as needed (see <xref target="compound-ack-1byte"/>).
<!-- The M bits with 0 value signal the end of the SCHC Compound ACK.
To avoid confusing the M '0s' padding bits with Window number 0, if present in the SCHC Compound ACK, Window number 0 MUST be placed as w1. -->
Since window number 0, if present in the message, is placed as w1, the M bits set to zero can’t be confused with window number 0,
and therefore they signal the end of the SCHC Compound ACK message.
<!-- The RECOMMENDED value for the padding bits is 0. -->
</t>




<t> <xref target="compound-ack-less-M-padding"/> shows the case when the required padding bits are strictly less than M bits.
    In this case, the layer-2 MTU (Maximum Transmission Unit) does not leave room for any extra window value, let alone any bitmap,
	thereby signaling the end of the SCHC Compound ACK message.
<!--    The RECOMMENDED padding value is 0. -->
</t>

<t><figure title="SCHC Compound ACK message format with less than M padding bits" anchor="compound-ack-less-M-padding"><artwork><![CDATA[
  |--- SCHC ACK Header --|- W=w1 -|...|---- W=wi -----|
         |--T-|---M--|-1-|        |...|---M--|        |---M--|
  +------+----+------+---+--------+...+------+--------+~~~+
  |RuleID|DTag| W=w1 |C=0| Bitmap |...| W=wi | Bitmap |pad|
  +------+----+------+---+--------+...+------+--------+~~~+
                                  next L2 Word boundary ->|
     Losses are found in windows W = w1,...,wi; where w1<w2<...<wi

    ]]></artwork></figure></t>

<t>The SCHC Compound ACK MUST NOT use the Compressed Bitmap format for intermediate windows/bitmaps (i.e., bitmaps that are not the last one of the SCHC Compound ACK message), and
therefore intermediate bitmaps fields MUST be of size WINDOW_SIZE.
    Hence, the SCHC Compound ACK MAY use a Compressed Bitmap format only for the last bitmap in the message.
The optional usage of this Compressed Bitmap for the last bitmap MUST be specified by the SCHC technology-specific profile.</t>

<t> The case where the last bitmap is effectively compressed corresponds to <xref target="compound-ack-less-M-padding"/>,
    with the last bitmap ending, by construction, on an L2 Word boundary, therefore resulting in no padding at all.</t>

<t><xref target="compound-ack-compressed-bitmap-1"/> illustrates a bitmap compression example of a SCHC Compound ACK,
    where the bitmap of the last window (wi) indicates that the first tile has not been correctly
    received.
    Because the compression algorithm resulted in effective compression, no padding is needed.
    </t>

<t><figure title="SCHC Compound ACK message format with compressed bitmap" anchor="compound-ack-compressed-bitmap-1"><artwork><![CDATA[

  |--- SCHC ACK Header --|- W=w1 -|...|-------- W=wi -------|
         |--T-|---M--|-1-|        |...|---M--|
  +------+----+------+---+--------+...+------+--------------+
  |RuleID|DTag| W=w1 |C=0| Bitmap |...| W=wi |0 1 1 1 1 1 1 |
  +------+----+------+---+--------+...+------+--------------+
                         next L2 Word boundary ->|

                 SCHC Compound ACK with uncompressed Bitmap

  |--- SCHC ACK Header --|- W=w1 -|...|-- W=wi --|
         |--T-|---M--|-1-|        |...|---M--|
  +------+----+------+---+--------+...+------+---+
  |RuleID|DTag| W=w1 |C=0| Bitmap |...| W=wi |0 1|
  +------+----+------+---+--------+...+------+---+
                         next L2 Word boundary ->|

        Transmitted SCHC Compound ACK with compressed Bitmap

   Losses are found in windows W = w1,...,wi; where w1<w2<...<wi

]]></artwork></figure></t>

<t><xref target="compound-ack-compressed-bitmap"/> illustrates another bitmap compression example of a SCHC Compound ACK,
    where the bitmap of the last window (wi) indicates that the second and the fourth tile have not been correctly
    received.
    In this example, the compression algorithm does not result in effective compression of the last bitmap.
    Besides, because more than M bits of padding would be needed to fill the last L2 Word, M bits at 0 are appended to the message before padding is applied.
    </t>
<t><figure title="SCHC Compound ACK message format with compressed bitmap" anchor="compound-ack-compressed-bitmap"><artwork><![CDATA[


 |--- SCHC ACK Header --|-W=w1-|...|-------- W=wi -------|
        |--T-|---M--|-1-|      |...|---M--|
 +------+----+------+---+------+...+------+--------------+
 |RuleID|DTag| W=w1 |C=0|Bitmap|...| W=wi |1 0 1 0 1 1 1 |
 +------+----+------+---+------+...+------+--------------+
                    next L2 Word boundary ->|
                 SCHC Compound ACK with uncompressed Bitmap

 |--- SCHC ACK Header --|-W=w1-|...|-------- W=wi -------|
        |--T-|---M--|-1-|      |...|---M--|              |---M--|
 +------+----+------+---+------+...+------+--------------+------+~~~+
 |RuleID|DTag| W=w1 |C=0|Bitmap|...| W=wi |1 0 1 0 1 1 1 |00..00|pad|
 +------+----+------+---+------+...+------+--------------+------+~~~+
                    next L2 Word boundary ->|<------ L2 Word ------>|
                  Transmitted SCHC Compound ACK

      Losses are found in windows W = w1,...,wi; where w1<w2<...<wi

]]></artwork></figure></t>

<t>If a SCHC sender gets a SCHC Compound ACK with invalid W’s, such as duplicate W values or W values not sent yet, it MUST discard the whole
SCHC Compound ACK message.</t>

<t>Note: because it has a C bit reset to 0, the SCHC Compound ACK is distinguishable from the Receiver-Abort message <xref target="RFC8724"/>, which has a C bit set to 1.</t>

</section>


<section anchor="schc-compound-ack-behaviour" title="SCHC Compound ACK Behaviour">

<t>The SCHC ACK-on-Error behaviour is described in section 8.4.3 of <xref target="RFC8724"/>. The present document slightly modifies this behaviour,
since in the baseline SCHC specification a SCHC ACK reports only one bitmap for the reception of exactly one window of tiles. The present SCHC
Compound ACK specification extends the SCHC ACK message format so that it can contain several bitmaps, each bitmap being identified by its corresponding
window number.</t>
<t>The SCHC ACK format, as presented in <xref target="RFC8724"/>, can be considered a special SCHC Compound ACK case, in which it reports only the tiles of one window. Therefore, the SCHC Compound ACK is backwards compatible with the SCHC ACK format presented in <xref target="RFC8724"/>.
The receiver can suspect if the sender does not support the SCHC Compound ACK, if the sender does not resend any tiles from windows that are not the first one in the SCHC Compound ACK and more ACKs are needed. In that case, the receiver can send SCHC Compound ACKs with only one window of tiles.</t>
<t>Also, some flexibility is introduced with respect to <xref target="RFC8724"/>, in that the receiver has the capability to respond to the All-0 with
a SCHC Compound ACK or not, depending on certain parameters, like network conditions, sender buffer/chache size, supported application delay. Note that even though the protocol allows for such flexibility, the
actual decision criteria is not specified in this document. The application MUST set expiration timer values according to when the feedback is expected to be received, e.g., after the All-0 or after the All-1.</t>


<t>The following <xref target="ACK-on-Error-subsection"/> (and its subsections) replaces the complete sections 8.4.3 (and its subsections) of RFC 8724.
<!--For the convenience of the reader, the added text to the original RFC 8724 is highlighted with *** NEW TEXT *** and the deleted text from RFC 8724 is delimited by &#45;&#45; OLD TEXT &#45;&#45;.-->
</t>
<!--<t>The following sections describe the differences between the baseline SCHC specification and the present SCHC protocol extension specification.-->
<!--New text is between ** NEW TEXT **. Old text is &#45;&#45; OLD TEXT &#45;&#45;. New text replaces old text.-->

<!--</t>-->

           <section anchor="ACK-on-Error-subsection" numbered="true" toc="include" removeInRFC="false" pn="section-8.4.3">
          <name slugifiedName="name-ack-on-error-mode">ACK-on-Error Mode</name>
          <t pn="section-8.4.3-1">The ACK-on-Error mode supports L2 technologies that have variable MTU and out-of-order delivery.
It requires an L2 that provides a feedback path from the reassembler to the fragmenter.
See Appendix F for a discussion on using ACK-on-Error mode on quasi-bidirectional links.</t>
          <t pn="section-8.4.3-2">In ACK-on-Error mode, windows are used.</t>
          <t pn="section-8.4.3-3">All tiles except the last one and the penultimate one <bcp14>MUST</bcp14> be of equal size, hereafter called "regular".
The size of the last tile <bcp14>MUST</bcp14> be smaller than or equal to the regular tile size.
Regarding the penultimate tile, a Profile <bcp14>MUST</bcp14> pick one of the following two options:</t>
          <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3-4">
            <li pn="section-8.4.3-4.1">The penultimate tile size <bcp14>MUST</bcp14> be the regular tile size, or</li>
            <li pn="section-8.4.3-4.2">the penultimate tile size <bcp14>MUST</bcp14> be either the regular tile size or the regular tile size minus one L2 Word.</li>
          </ul>
          <t pn="section-8.4.3-5">A SCHC Fragment message carries one or several contiguous tiles, which may span multiple windows.
            A SCHC Compound ACK reports on the reception of one window of tiles or several windows of tiles, each one identified by its window number.
          </t>
          <t pn="section-8.4.3-6">See <xref target="Fig-TilesACKonError" format="default" sectionFormat="of" derivedContent="Figure 23"/> for an example.</t>
          <figure anchor="Fig-TilesACKonError" align="left" suppress-title="false" pn="figure-23">
            <name slugifiedName="name-schc-packet-fragmented-in-til">SCHC Packet Fragmented in Tiles, ACK-on-Error Mode</name>
            <artwork name="" type="" align="left" alt="" pn="section-8.4.3-7.1">
        +---------------------------------------------...-----------+
        |                       SCHC Packet                         |
        +---------------------------------------------...-----------+

Tile#   | 4 | 3 | 2 | 1 | 0 | 4 | 3 | 2 | 1 | 0 | 4 |     | 0 | 4 |3|
Window# |-------- 0 --------|-------- 1 --------|- 2  ... 27 -|- 28-|


SCHC Fragment msg   |-----------|</artwork>
          </figure>
          <t pn="section-8.4.3-8">The W field is wide enough that it unambiguously represents an absolute window number.
The fragment receiver sends SCHC Compound ACKs to the fragment sender about windows for which tiles are missing.
No SCHC Compound ACK is sent by the fragment receiver for windows that it knows have been fully received.</t>
          <t pn="section-8.4.3-9">The fragment sender retransmits SCHC Fragments for tiles that are reported missing.
It can advance to next windows even before it has ascertained that all tiles belonging to previous windows have been correctly received,
and it can still later retransmit SCHC Fragments with tiles belonging to previous windows.
Therefore, the sender and the receiver may operate in a decoupled fashion.
The fragmented SCHC Packet transmission concludes when:</t>
          <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3-10">
            <li pn="section-8.4.3-10.1">integrity checking shows that the fragmented SCHC Packet has been correctly reassembled at the receive end,
and this information has been conveyed back to the sender, or</li>
            <li pn="section-8.4.3-10.2">too many retransmission attempts were made, or</li>
            <li pn="section-8.4.3-10.3">the receiver determines that the transmission of this fragmented SCHC Packet has been inactive for too long.</li>
          </ul>
          <t pn="section-8.4.3-11">Each Profile <bcp14>MUST</bcp14> specify which RuleID value(s) corresponds to SCHC F/R messages operating in this mode.</t>
          <t pn="section-8.4.3-12">The W field <bcp14>MUST</bcp14> be present in the SCHC F/R messages.</t>
          <t pn="section-8.4.3-13">Each Profile, for each RuleID value, <bcp14>MUST</bcp14> define:</t>
          <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3-14">
            <li pn="section-8.4.3-14.1">the tile size (a tile does not need to be multiple of an L2 Word, but it <bcp14>MUST</bcp14> be at least the size of an L2 Word),</li>
            <li pn="section-8.4.3-14.2">the value of M,</li>
            <li pn="section-8.4.3-14.3">the value of N,</li>
            <li pn="section-8.4.3-14.4">the value of WINDOW_SIZE, which <bcp14>MUST</bcp14> be strictly less than 2^N,</li>
            <li pn="section-8.4.3-14.5">the size and algorithm for the RCS field,</li>
            <li pn="section-8.4.3-14.6">the value of T,</li>
            <li pn="section-8.4.3-14.7">the value of MAX_ACK_REQUESTS,</li>
            <li pn="section-8.4.3-14.8">the expiration time of the Retransmission Timer,</li>
            <li pn="section-8.4.3-14.9">the expiration time of the Inactivity Timer,</li>
            <li pn="section-8.4.3-14.10">if the last tile is carried in a Regular SCHC Fragment or an All-1 SCHC Fragment (see Section 8.4.3.1), and</li>
            <li pn="section-8.4.3-14.11">if the penultimate tile <bcp14>MAY</bcp14> be one L2 Word smaller than the regular tile size. In this case, the regular tile size <bcp14>MUST</bcp14> be at least twice the L2 Word size.</li>
<!--              <li pn="section-8.4.3-14.12">if the SCHC Compound ACK is used.</li>-->
              <li pn="section-8.4.3-14.12">Usage or not of the SCHC Compound ACK message.</li>
              <li pn="section-8.4.3-14.13">Usage or not of the compressed bitmap format in the last window of the SCHC Compound ACK message.</li>
          </ul>
          <t pn="section-8.4.3-15">For each active pair of RuleID and DTag values, the sender <bcp14>MUST</bcp14> maintain:</t>
          <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3-16">
            <li pn="section-8.4.3-16.1">one Attempts counter, and</li>
            <li pn="section-8.4.3-16.2">one Retransmission Timer.</li>
          </ul>
          <t pn="section-8.4.3-17">For each active pair of RuleID and DTag values, the receiver <bcp14>MUST</bcp14> maintain:</t>
          <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3-18">
            <li pn="section-8.4.3-18.1">one Inactivity Timer, and</li>
            <li pn="section-8.4.3-18.2">one Attempts counter.</li>
          </ul>
          <section anchor="ACK-on-Error-sender" numbered="true" toc="exclude" removeInRFC="false" pn="section-8.4.3.1">
            <name slugifiedName="name-sender-behavior-3">Sender Behavior</name>
            <t pn="section-8.4.3.1-1">At the beginning of the fragmentation of a new SCHC Packet:</t>
            <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.1-2">
              <li pn="section-8.4.3.1-2.1">the fragment sender <bcp14>MUST</bcp14> select a RuleID and DTag value pair for this SCHC Packet.
A Rule <bcp14>MUST NOT</bcp14> be selected if the values of M and WINDOW_SIZE for that Rule are such that the SCHC Packet cannot be fragmented in (2^M) * WINDOW_SIZE tiles or less.</li>
              <li pn="section-8.4.3.1-2.2">the fragment sender <bcp14>MUST</bcp14> initialize the Attempts counter to 0 for that RuleID and DTag value pair.</li>
            </ul>
            <t pn="section-8.4.3.1-3">A Regular SCHC Fragment message carries in its payload one or more tiles.
If more than one tile is carried in one Regular SCHC Fragment:</t>
            <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.1-4">
              <li pn="section-8.4.3.1-4.1">the selected tiles <bcp14>MUST</bcp14> be contiguous in the original SCHC Packet, and</li>
              <li pn="section-8.4.3.1-4.2">they <bcp14>MUST</bcp14> be placed in the SCHC Fragment Payload adjacent to one another, in the order they appear in the SCHC Packet, from the start of the SCHC Packet toward its end.</li>
            </ul>
            <t pn="section-8.4.3.1-5">Tiles that are not the last one <bcp14>MUST</bcp14> be sent in Regular SCHC Fragments specified in Section 8.3.1.1.
The FCN field <bcp14>MUST</bcp14> contain the tile index of the first tile sent in that SCHC Fragment.</t>
            <t pn="section-8.4.3.1-6">In a Regular SCHC Fragment message, the sender <bcp14>MUST</bcp14> fill the W field with the window number of the first tile sent in that SCHC Fragment.</t>
            <t pn="section-8.4.3.1-7">A Profile <bcp14>MUST</bcp14> define if the last tile of a SCHC Packet is sent:</t>
            <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.1-8">
              <li pn="section-8.4.3.1-8.1">in a Regular SCHC Fragment, alone or as part of a multi-tiles Payload,</li>
              <li pn="section-8.4.3.1-8.2">alone in an All-1 SCHC Fragment, or</li>
              <li pn="section-8.4.3.1-8.3">with any of the above two methods.</li>
            </ul>
            <t pn="section-8.4.3.1-9">In an All-1 SCHC Fragment message, the sender <bcp14>MUST</bcp14> fill the W field with the window number of the last tile of the SCHC Packet.</t>
            <t pn="section-8.4.3.1-10">The fragment sender <bcp14>MUST</bcp14> send SCHC Fragments such that, all together, they contain all the tiles of the fragmented SCHC Packet.</t>
            <t pn="section-8.4.3.1-11">The fragment sender <bcp14>MUST</bcp14> send at least one All-1 SCHC Fragment.</t>
            <t pn="section-8.4.3.1-12">In doing the two items above, the sender <bcp14>MUST</bcp14> ascertain that the receiver will not receive the last tile through both a Regular SCHC Fragment and an All-1 SCHC Fragment.</t>
            <t pn="section-8.4.3.1-13">The fragment sender <bcp14>MUST</bcp14> listen for SCHC Compound ACK messages after having sent:</t>
            <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.1-14">
              <li pn="section-8.4.3.1-14.1">an All-1 SCHC Fragment, or</li>
              <li pn="section-8.4.3.1-14.2">a SCHC ACK REQ.</li>
            </ul>
            <t pn="section-8.4.3.1-15">A Profile <bcp14>MAY</bcp14> specify other times at which the fragment sender <bcp14>MUST</bcp14> listen for SCHC Compound ACK messages.
For example, this could be after sending a complete window of tiles.</t>
            <t pn="section-8.4.3.1-16">Each time a fragment sender sends an All-1 SCHC Fragment or a SCHC ACK REQ:</t>
            <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.1-17">
              <li pn="section-8.4.3.1-17.1">it <bcp14>MUST</bcp14> increment the Attempts counter, and</li>
              <li pn="section-8.4.3.1-17.2">it <bcp14>MUST</bcp14> reset the Retransmission Timer.</li>
            </ul>
            <t pn="section-8.4.3.1-18">On Retransmission Timer expiration:</t>
            <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.1-19">
              <li pn="section-8.4.3.1-19.1">if the Attempts counter is strictly less than MAX_ACK_REQUESTS,
the fragment sender <bcp14>MUST</bcp14> send
either the All-1 SCHC Fragment or
a SCHC ACK REQ with the W field corresponding to the last window,</li>
              <li pn="section-8.4.3.1-19.2">otherwise, the fragment sender <bcp14>MUST</bcp14> send a SCHC Sender-Abort, and
it <bcp14>MAY</bcp14> exit with an error condition.</li>
            </ul>
            <t pn="section-8.4.3.1-20">All message receptions being discussed in the rest of this section are to be understood as
"matching the RuleID and DTag pair being processed", even if not spelled out, for brevity.</t>
            <t pn="section-8.4.3.1-21">On receiving a SCHC Compound ACK:</t>
            <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.1-22">
              <li pn="section-8.4.3.1-22.1">
                <t pn="section-8.4.3.1-22.1.1">if one of the W field in the SCHC Compound ACK corresponds to the last window of the SCHC Packet:</t>
                <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.1-22.1.2">
                  <li pn="section-8.4.3.1-22.1.2.1">if the C bit is set, the sender <bcp14>MAY</bcp14> exit successfully.</li>
                  <li pn="section-8.4.3.1-22.1.2.2">
                    <t pn="section-8.4.3.1-22.1.2.2.1">otherwise:      </t>
                    <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.1-22.1.2.2.2">
                      <li pn="section-8.4.3.1-22.1.2.2.2.1">
                        <t pn="section-8.4.3.1-22.1.2.2.2.1.1">if the Profile mandates that the last tile be sent in an All-1 SCHC Fragment:</t>
                        <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.1-22.1.2.2.2.1.2">
                          <li pn="section-8.4.3.1-22.1.2.2.2.1.2.1">
                            <t pn="section-8.4.3.1-22.1.2.2.2.1.2.1.1">if the SCHC Compound ACK shows no missing tile at the receiver, the sender:</t>
                            <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.1-22.1.2.2.2.1.2.1.2">
                              <li pn="section-8.4.3.1-22.1.2.2.2.1.2.1.2.1">
                                <bcp14>MUST</bcp14> send a SCHC Sender-Abort, and</li>
                              <li pn="section-8.4.3.1-22.1.2.2.2.1.2.1.2.2">
                                <bcp14>MAY</bcp14> exit with an error condition.</li>
                            </ul>
                          </li>
                          <li pn="section-8.4.3.1-22.1.2.2.2.1.2.2">
                            <t pn="section-8.4.3.1-22.1.2.2.2.1.2.2.1">otherwise:</t>
                            <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.1-22.1.2.2.2.1.2.2.2">
                              <li pn="section-8.4.3.1-22.1.2.2.2.1.2.2.2.1">the fragment sender <bcp14>MUST</bcp14> send SCHC Fragment messages containing all the tiles of all the windows that are reported missing in the SCHC Compound ACK.</li>
                              <li pn="section-8.4.3.1-22.1.2.2.2.1.2.2.2.2">if the last of these SCHC Fragment messages is not an All-1 SCHC Fragment, then the fragment sender MAY either send in addition a SCHC ACK REQ with the W field corresponding to the last window, or repeat the All-1 SCHC Fragment to ask the receiver confirmation that all tiles have been correctly received.
</li>
                              <li pn="section-8.4.3.1-22.1.2.2.2.1.2.2.2.3">in doing the two items above, the sender <bcp14>MUST</bcp14> ascertain that the receiver will not receive the last tile through both a Regular SCHC Fragment and an All-1 SCHC Fragment.</li>
                            </ul>
                          </li>
                        </ul>
                      </li>
                      <li pn="section-8.4.3.1-22.1.2.2.2.2">
                        <t pn="section-8.4.3.1-22.1.2.2.2.2.1">otherwise:</t>
                        <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.1-22.1.2.2.2.2.2">
                          <li pn="section-8.4.3.1-22.1.2.2.2.2.2.1">if the SCHC Compound ACK shows no missing tile at the receiver, the sender
<bcp14>MUST</bcp14> send the All-1 SCHC Fragment</li>
                          <li pn="section-8.4.3.1-22.1.2.2.2.2.2.2">
                            <t pn="section-8.4.3.1-22.1.2.2.2.2.2.2.1">otherwise:</t>
                            <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.1-22.1.2.2.2.2.2.2.2">
                              <li pn="section-8.4.3.1-22.1.2.2.2.2.2.2.2.1">the fragment sender <bcp14>MUST</bcp14> send SCHC Fragment messages containing all the tiles that are reported missing in the SCHC Compound ACK.</li>
                              <li pn="section-8.4.3.1-22.1.2.2.2.2.2.2.2.2">the fragment sender <bcp14>MUST</bcp14> then send
either the All-1 SCHC Fragment or
a SCHC ACK REQ with the W field corresponding to the last window.</li>
                            </ul>
                          </li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
              <li pn="section-8.4.3.1-22.2">
                <t pn="section-8.4.3.1-22.2.1">otherwise, the fragment sender:</t>
                <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.1-22.2.2">
                  <li pn="section-8.4.3.1-22.2.2.1">
                    <bcp14>MUST</bcp14> send SCHC Fragment messages containing the tiles that are reported missing in the SCHC Compound ACK.</li>
                  <li pn="section-8.4.3.1-22.2.2.2">then, it <bcp14>MAY</bcp14> send a SCHC ACK REQ with the W field corresponding to the last window.</li>
                </ul>
              </li>
            </ul>
            <t pn="section-8.4.3.1-23">See Figure 43/> for one among several possible examples of a Finite State Machine implementing a sender behavior obeying this specification.</t>
          </section>
          <section anchor="ACK-on-Error-receiver" numbered="true" toc="exclude" removeInRFC="false" pn="section-8.4.3.2">
            <name slugifiedName="name-receiver-behavior-3">Receiver Behavior</name>
            <t pn="section-8.4.3.2-1">On receiving a SCHC Fragment with a RuleID and DTag pair not being processed at that time:</t>
            <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.2-2">
              <li pn="section-8.4.3.2-2.1">the receiver <bcp14>SHOULD</bcp14> check if the DTag value has not recently been used for that RuleID value,
thereby ensuring that the received SCHC Fragment is not a remnant of a prior fragmented SCHC Packet transmission.
The initial value of the Inactivity Timer is the <bcp14>RECOMMENDED</bcp14> lifetime for the DTag value at the receiver.
If the SCHC Fragment is determined to be such a remnant, the receiver <bcp14>MAY</bcp14> silently ignore it and discard it.</li>
              <li pn="section-8.4.3.2-2.2">the receiver <bcp14>MUST</bcp14> start a process to assemble a new SCHC Packet with that RuleID and DTag value pair.
The receiver <bcp14>MUST</bcp14> start an Inactivity Timer for that RuleID and DTag value pair.
It <bcp14>MUST</bcp14> initialize an Attempts counter to 0 for that RuleID and DTag value pair.
If the receiver is under-resourced to do this, it <bcp14>MUST</bcp14> respond to the sender with a SCHC Receiver-Abort.</li>
            </ul>
            <t pn="section-8.4.3.2-3">On reception of any SCHC F/R message for the RuleID and DTag pair being processed, the receiver <bcp14>MUST</bcp14> reset the Inactivity Timer pertaining to that RuleID and DTag pair.</t>
            <t pn="section-8.4.3.2-4">All message receptions being discussed in the rest of this section are to be understood as
"matching the RuleID and DTag pair being processed", even if not spelled out, for brevity.</t>
            <t pn="section-8.4.3.2-5">On receiving a SCHC Fragment message,
the receiver determines what tiles were received, based on the payload length and on the W and FCN fields of the SCHC Fragment.</t>
            <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.2-6">
              <li pn="section-8.4.3.2-6.1">if the FCN is All-1, if a Payload is present, the full SCHC Fragment Payload <bcp14>MUST</bcp14> be assembled including the padding bits.
This is because the size of the last tile is not known by the receiver;
therefore, padding bits are indistinguishable from the tile data bits, at this stage.
They will be removed by the SCHC C/D sublayer.
If the size of the SCHC Fragment Payload exceeds or equals
the size of one regular tile plus the size of an L2 Word, this <bcp14>SHOULD</bcp14> raise an error flag.</li>
              <li pn="section-8.4.3.2-6.2">
                <t pn="section-8.4.3.2-6.2.1">otherwise, tiles <bcp14>MUST</bcp14> be assembled based on the a priori known tile size.
                </t>
                <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.2-6.2.2">
                  <li pn="section-8.4.3.2-6.2.2.1">If allowed by the Profile, the end of the payload <bcp14>MAY</bcp14> contain the last tile, which may be shorter. Padding bits are indistinguishable from the tile data bits, at this stage.</li>
                  <li pn="section-8.4.3.2-6.2.2.2">The payload may contain the penultimate tile that, if allowed by the Profile, <bcp14>MAY</bcp14> be exactly one L2 Word shorter than the regular tile size.</li>
                  <li pn="section-8.4.3.2-6.2.2.3">
                    <t pn="section-8.4.3.2-6.2.2.3.1">Otherwise, padding bits <bcp14>MUST</bcp14> be discarded.
This is possible because:</t>
                    <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.2-6.2.2.3.2">
                      <li pn="section-8.4.3.2-6.2.2.3.2.1">the size of the tiles is known a priori,</li>
                      <li pn="section-8.4.3.2-6.2.2.3.2.2">tiles are larger than an L2 Word, and</li>
                      <li pn="section-8.4.3.2-6.2.2.3.2.3">padding bits are always strictly less than an L2 Word.</li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
            <t pn="section-8.4.3.2-7">On receiving a SCHC All-0 SCHC Fragment:</t>
              <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.2-8">
                  <li pn="section-8.4.3.2-8.1">if the receiver knows of any windows with missing tiles for the packet being reassembled (and depending on certain parameters, like network conditions, sender buffer/chache size, supported application delay, among others), it MAY return a SCHC Compound ACK for the missing tiles, starting from the lowest-numbered window.
                  </li>
              </ul>
            <t pn="section-8.4.3.2-9">On receiving a SCHC ACK REQ or an All-1 SCHC Fragment:</t>
            <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.2-10">
              <li pn="section-8.4.3.2-10.1">if the receiver knows of any windows with missing tiles for the packet being reassembled, it
<bcp14>MUST</bcp14> return a SCHC Compound ACK for the missing tiles, starting from the lowest-numbered window.</li>
              <li pn="section-8.4.3.2-10.2">
                <t pn="section-8.4.3.2-10.2.1">otherwise:
                </t>
                <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.2-10.2.2">
                  <li pn="section-8.4.3.2-10.2.2.1">if it has received at least one tile, it <bcp14>MUST</bcp14> return a SCHC Compound ACK for the highest-numbered window it currently has tiles for,</li>
                  <li pn="section-8.4.3.2-10.2.2.2">otherwise, it <bcp14>MUST</bcp14> return a SCHC Compound ACK for window numbered 0.</li>
                </ul>
              </li>
            </ul>
            <t pn="section-8.4.3.2-11">A Profile <bcp14>MAY</bcp14> specify other times and circumstances at which
a receiver sends a SCHC Compound ACK,
and which window the SCHC Compound ACK reports about in these circumstances.</t>
            <t pn="section-8.4.3.2-12">Upon sending a SCHC Compound ACK, the receiver <bcp14>MUST</bcp14> increase the Attempts counter.</t>
            <t pn="section-8.4.3.2-13">After receiving an All-1 SCHC Fragment,
a receiver <bcp14>MUST</bcp14> check the integrity of the reassembled SCHC Packet at least every time
it prepares for sending a SCHC Compound ACK for the last window.</t>
            <t pn="section-8.4.3.2-14">Upon receiving a SCHC Sender-Abort,
the receiver <bcp14>MAY</bcp14> exit with an error condition.</t>
            <t pn="section-8.4.3.2-15">Upon expiration of the Inactivity Timer,
the receiver <bcp14>MUST</bcp14> send a SCHC Receiver-Abort,
and it <bcp14>MAY</bcp14> exit with an error condition.</t>
            <t pn="section-8.4.3.2-16">On the Attempts counter exceeding MAX_ACK_REQUESTS,
the receiver <bcp14>MUST</bcp14> send a SCHC Receiver-Abort,
and it <bcp14>MAY</bcp14> exit with an error condition.</t>
            <t pn="section-8.4.3.2-17">Reassembly of the SCHC Packet concludes when:</t>
            <ul spacing="normal" bare="false" empty="false" pn="section-8.4.3.2-18">
              <li pn="section-8.4.3.2-18.1">a Sender-Abort has been received, or</li>
              <li pn="section-8.4.3.2-18.2">the Inactivity Timer has expired, or</li>
              <li pn="section-8.4.3.2-18.3">the Attempts counter has exceeded MAX_ACK_REQUESTS, or</li>
              <li pn="section-8.4.3.2-18.4">at least an All-1 SCHC Fragment has been received and integrity checking of the reassembled SCHC Packet is successful.</li>
            </ul>
            <t pn="section-8.4.3.2-19">See Figure 44 for one among several possible examples of a Finite State Machine implementing a receiver behavior obeying this specification. The example provided is meant to match the sender Finite State Machine of Figure 43.</t>
          </section>
        </section>
    </section>






<!--<section anchor="sender-behaviour" title="Sender Behaviour">-->

<!--<t>OLD TEXT (<xref target="RFC8724"/>, section 8.4.3.1) - On receiving a SCHC ACK:</t>-->

<!--<t><list style="symbols">-->
<!--<t>(...)</t>-->
<!--<t>the fragment sender MUST send SCHC Fragment messages containing all the tiles that are reported missing in the SCHC ACK.</t>-->
<!--<t>if the last of these SCHC Fragment messages is not an All-1 SCHC Fragment, then the fragment sender MUST in addition send-->
<!--after it a SCHC ACK REQ with the W field corresponding to the last window.</t>-->
<!--</list></t>-->

<!--<t>NEW TEXT - On receiving a SCHC Compound ACK:</t>-->

<!--<t><list style="symbols">-->
<!--<t>(...)</t>-->
<!--<t>the fragment sender MUST send SCHC Fragment messages containing all the tiles of all the windows that are reported missing in the-->
<!--SCHC Compound ACK.</t>-->
<!--<t>if the last of these SCHC Fragment messages reported missing is not an All-1 SCHC Fragment, then the fragment sender MAY either,-->
<!--send in addition a SCHC ACK REQ with the W field corresponding to the last window, continue the transmission of the remaining fragments to be-->
<!--transmitted, or repeat the All-1 fragment to confirm that all fragments have been correctly received.</t>-->
<!--</list></t>-->

<!--</section>-->

<!--<section anchor="receiver-behaviour" title="Receiver Behaviour">-->

<!--<t>OLD TEXT (<xref target="RFC8724"/>, section 8.4.3.2) - On receiving a SCHC ACK REQ or an All-1 SCHC Fragment:</t>-->

<!--<t><list style="symbols">-->
<!--<t>if the receiver knows of any windows with missing tiles for the packet being reassembled, it MUST return a SCHC ACK for the-->
<!--lowest-numbered such window.</t>-->
<!--</list></t>-->

<!--<t>NEW TEXT: On receiving an All-0 SCHC Fragment:</t>-->

<!--<t><list style="symbols">-->
<!--<t>if the receiver knows of any windows with missing tiles for the packet being reassembled (and if network conditions are known to be conducive),-->
<!--it MAY return a SCHC Compound ACK for the missing tiles, starting from the lowest-numbered window.</t>-->
<!--</list></t>-->

<!--<t>NEW TEXT: On receiving a SCHC ACK REQ or an All-1 SCHC Fragment:</t>-->

<!--<t><list style="symbols">-->
<!--<t>if the receiver knows of any windows with missing tiles for the packet being reassembled, it MUST return a SCHC Compound ACK for the missing tiles, starting from the lowest-numbered window.</t>-->
<!--</list></t>-->

<!--</section>-->

</section>


<section anchor="schc-compound-ack-examples" title="SCHC Compound ACK Example">

<t><xref target="compound-ack-ex-ex"/> shows an example transmission of a SCHC Packet in ACK-on-Error mode using the SCHC Compound ACK.
In the example, the SCHC Packet is fragmented in 14 tiles, with N=3, WINDOW_SIZE=7, M=2 and two lost SCHC fragments.
Only 1 compound SCHC ACK is generated.</t>



<t><figure title="SCHC Compound ACK message sequence example" anchor="compound-ack-ex-ex"><artwork><![CDATA[
        Sender                Receiver
          |-----W=0, FCN=6 ----->|
          |-----W=0, FCN=5 ----->|
          |-----W=0, FCN=4 ----->|
          |-----W=0, FCN=3 ----->|
          |-----W=0, FCN=2 --X   |
          |-----W=0, FCN=1 ----->|
          |-----W=0, FCN=0 ----->| Bitmap: 1111011
      (no ACK)
          |-----W=1, FCN=6 ----->|
          |-----W=1, FCN=5 ----->|
          |-----W=1, FCN=4 ----->|
          |-----W=1, FCN=3 ----->|
          |-----W=1, FCN=2 ----->|
          |-----W=1, FCN=1 --X   |
          |-- W=1, FCN=7 + RCS ->| Integrity check: failure
          |<--- Compound ACK ----| [C=0, W=0 - Bitmap:1111011, 
          |-----W=0, FCN=2 ----->|        W=1 - Bitmap:1111101]
          |-----W=1, FCN=1 ----->| Integrity check: success
          |<--- ACK, W=1, C=1 ---| C=1
        (End)
]]></artwork></figure></t>


<t><figure title="SCHC Compound ACK message format example: Losses are found in windows 00 and 01" anchor="compound-ack-fmt-ex"><artwork><![CDATA[

 |--- SCHC ACK Header --|- W=00 --|----- W=01 -----|
        |--T-|---M--|-1-|         |---M--|         |---M--|
 +------+----+------+---+---------+------+---------+------+-----+
 |RuleID|DTag| W=00 |C=0| 1111011 | W=01 | 1111101 |  00  | pad |
 +------+----+------+---+---------+------+---------+------+-----+
                         next L2 Word boundary ->|<-- L2 Word ->|

]]></artwork></figure></t>

</section>



<section anchor="schc-compound-ack-yang-model" title="SCHC Compound ACK YANG Data Model">


<t>The present document also extends the SCHC YANG data model defined in <xref target="RFC9363"/> by including
a new leaf in the Ack-on-Error fragmentation mode to describe both the option to use the SCHC Compound ACK, as well as its bitmap format. </t>

<section anchor="yang-model" title="SCHC YANG Data Model Extension">


<t><figure title="SCHC YANG Data Model - Compound ACK extension" anchor="schc-data-model"><artwork><![CDATA[

<CODE BEGINS> file "ietf-lpwan-schc-compound-ack@2022-12-02.yang"
   
module ietf-lpwan-schc-compound-ack {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:" +
           "ietf-lpwan-schc-compound-ack";
  prefix schc-compound-ack;

  import ietf-schc {
    prefix schc;
  }

  organization
    "IETF IPv6 over Low Power Wide-Area Networks (lpwan)
     working group";
  contact
    "WG Web:   <https://datatracker.ietf.org/wg/lpwan/about/>
     WG List:  <mailto:lp-wan@ietf.org>
     Editor:   Laurent Toutain
       <mailto:laurent.toutain@imt-atlantique.fr>
     Editor:   Juan Carlos Zuniga
       <mailto:j.c.zuniga@ieee.org>
     Editor:   Sergio Aguilar
       <mailto:sergio.aguilar.romero@upc.edu>";
  description
    "This module extends the ietf-schc module to include the
     Compound ACK behavior for ACK-on-Error as defined in RFC YYYY.
     It introduces a new leaf for ACK-on-Error defining the format
     of the SCHC Compound ACK, adding the possibility to send
     several bitmaps in a single SCHC ACK message.

     Copyright (c) 2023 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject to
     the license terms contained in, the Simplified BSD License set
     forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC XXXX
     (https://www.rfc-editor.org/info/rfcXXXX); see the RFC itself
     for full legal notices.

     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
     'MAY', and 'OPTIONAL' in this document are to be interpreted as
     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
     they appear in all capitals, as shown here.";

  revision 2023-03-16 {
    description
      "Initial version for RFC YYYY ";
    reference
      "RFC YYYY: SCHC Compound ACK";
  }

  identity bitmap-format-base-type {
    description
      "Define how the bitmap is formed in ACK messages.";
  }

  identity bitmap-RFC8724 {
    base bitmap-format-base-type;
    description
      "Bitmap by default as defined in RFC8724.";
  }

  identity bitmap-compound-ack {
    base bitmap-format-base-type;
    description
      "Compound ACK.";
  }

  typedef bitmap-format-type {
    type identityref {
      base bitmap-format-base-type;
    }
    description
      "Type of bitmap used in rules.";
  }

  augment "/schc:schc/schc:rule/schc:nature/schc:fragmentation" +
        "/schc:mode/schc:ack-on-error" {
    leaf bitmap-format {
      when "derived-from(../schc:fragmentation-mode," +
         " 'schc:fragmentation-mode-ack-on-error')";
      type schc-compound-ack:bitmap-format-type;
      default "schc-compound-ack:bitmap-RFC8724";
      description "How the bitmaps are included in the" +
         " SCHC ACK message.";
    }
    leaf last-bitmap-compression {
      when "derived-from(../schc:fragmentation-mode," +
         " 'schc:fragmentation-mode-ack-on-error')";
      type boolean;
      default "true";
      description
        "when true ultimate bitmap in the SCHC ACK message
                    can be compressed";
    }
    description
      "added to SCHC rules";
  }
}


<CODE ENDS>
		
]]></artwork></figure></t>


</section>

<section anchor="yang-tree" title="SCHC YANG Tree Extension">

<t><figure title="Tree Diagram - Compound ACK extension" anchor="schc-data-tree"><artwork><![CDATA[
  
  
augment /schc:schc/schc:rule/schc:nature/schc:fragmentation/
        schc:mode/schc:ack-on-error:
    +--rw bitmap-format?   schc-compound-ack:bitmap-format-type
	
]]></artwork></figure></t>

</section>

</section>


<!--</section>-->


<section anchor="schc-compound-ack-parameters" title="SCHC Compound ACK Parameters">

<t>This section lists the parameters related to the SCHC Compound ACK usage that need to be defined in the Profile.
    This list MUST be appended to the list of SCHC parameters under "Decision to use SCHC fragmentation mechanism or not. If yes, the document must describe:" in Annex D of <xref target="RFC8724"/>.
</t>

<t><list style="symbols">
<t>Usage or not of the SCHC Compound ACK message.</t>
<t>Usage or not of the compressed bitmap format in the last window of the SCHC Compound ACK message.</t>
</list></t>

</section>

<section anchor="security-considerations" title="Security considerations">

<t>The current document specifies a message format extension for SCHC. Hence, the same Security Considerations defined in <xref target="RFC8724"/> and in <xref target="RFC9363"/> apply.</t>

</section>
<section anchor="ianaconsiderations" title="IANA Considerations">
    <t>This document has no IANA actions.</t>
</section>

<section anchor="acknowledgements" title="Acknowledgements">

<t>Carles Gomez has been funded in part by the Spanish Government
   through the TEC2016-79988-P
   grant, and the PID2019-106808RA-I00 grant (funded by MCIN / AEI / 10.13039/501100011033), and by Secretaria
   d'Universitats i Recerca del Departament d'Empresa i Coneixement de
   la Generalitat de Catalunya 2017 through grant SGR 376.</t>
<t>Sergio Aguilar has been funded by the ERDF and the Spanish Government through project TEC2016-79988-P and project PID2019-106808RA-I00,
AEI/FEDER, EU (funded by MCIN / AEI / 10.13039/501100011033).</t>
<t>Sandra Cespedes has been funded in part by the ANID Chile Project FONDECYT Regular 1201893 and Basal Project FB0008.</t>
<t>Diego Wistuba has been funded by the ANID Chile Project FONDECYT Regular 1201893.</t>
<t>The authors would like to thank Rafael Vidal, Julien Boite, Renaud Marty, Antonis Platis, Dominique Barthel and Pascal Thubert for their
very useful comments, reviews and implementation design considerations.</t>

</section>


  </middle>

  <back>

   <references title='Normative References'>


<?rfc include='reference.RFC.2119'?>
<?rfc include='reference.RFC.8174'?>

<?rfc include='reference.RFC.8724'?>
<?rfc include='reference.RFC.9363'?>
    </references>


	<references title='Informative References'>
        <?rfc include='reference.RFC.8376'?>
	    </references>



  </back>
</rfc>

